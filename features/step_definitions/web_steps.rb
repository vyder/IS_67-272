# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require 'chronic'
# require 'xpath'
# 
# module Cucumber
#   module Rails
#     module CapybaraSelectDatesAndTimes
#       def select_date(field, options = {})
#         date     = Date.parse(options[:with])
#         selector = "#{field}" #%Q{.//fieldset[contains(./legend, "#{field}")]}
#         within(:xpath, selector) do
#           find(:xpath, '//select[contains(@id, "_1i")]').find(:xpath, ::XPath::HTML.option(date.year.to_s)).select_option
#           find(:xpath, '//select[contains(@id, "_2i")]').find(:xpath, ::XPath::HTML.option(date.strftime('%B').to_s)).select_option
#           find(:xpath, '//select[contains(@id, "_3i")]').find(:xpath, ::XPath::HTML.option(date.day.to_s)).select_option
#         end
#       end
# 
#       def select_time(field, options = {})
#         time     = Time.parse(options[:with])
#         selector = "#{field}" #{}%Q{.//fieldset[contains(./legend, "#{field}")]}
#         within(:xpath, selector) do
#           find(:xpath, '//select[contains(@id, "_4i")]').find(:xpath, ::XPath::HTML.option(time.hour.to_s.rjust(2,'0'))).select_option
#           find(:xpath, '//select[contains(@id, "_5i")]').find(:xpath, ::XPath::HTML.option(time.min.to_s.rjust(2,'0'))).select_option
#         end
#       end
# 
#       def select_datetime(field, options = {})
#         select_date(field, options)
#         select_time(field, options)
#       end
#     end
#   end
# end
# 
# World(Cucumber::Rails::CapybaraSelectDatesAndTimes)


module WithinHelpers
  def with_scope(locator)
    locator ? within(locator) { yield } : yield
  end
end
World(WithinHelpers)

## --------------
## GIVEN steps
## --------------
Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

## --------------
## WHEN steps
## --------------
When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(button)
  end
end

When /^(?:|I )follow "([^"]*)"(?: within "([^"]*)")?$/ do |link, selector|
  with_scope(selector) do
    click_link(link)
  end
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end

# When /^(?:|I )fill into "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
#   value = @reay_invite.invite_code
#   with_scope(selector) do
#     fill_in(field, :with => value)
#   end
# end

When /^(?:|I )fill in my invite code$/ do 
  value = @reay_invite.invite_code
  field = "invite_code"
  fill_in(field, :with => value)
end


# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following(?: within "([^"]*)")?:$/ do |selector, fields|
  with_scope(selector) do
    fields.rows_hash.each do |name, value|
      When %{I fill in "#{name}" with "#{value}"}
    end
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"(?: within "([^"]*)")?$/ do |value, field, selector|
  with_scope(selector) do
    select(value, :from => field)
  end
end

When /^(?:|I )check "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    check(field)
  end
end

When /^(?:|I )uncheck "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    uncheck(field)
  end
end

When /^(?:|I )choose "([^"]*)"(?: within "([^"]*)")?$/ do |field, selector|
  with_scope(selector) do
    choose(field)
  end
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"(?: within "([^"]*)")?$/ do |path, field, selector|
  with_scope(selector) do
    attach_file(field, path)
  end
end


# DATE AND TIME SELECTORS  (Capybara doesn't have same webrat methods, so need to add...)

# When /^(?:|I )select "([^\"]*)" as the "([^\"]*)" date$/ do |date, prefix|
#   date = Chronic.parse(date)
#  
#   select date.year.to_s, :from => "#{prefix}_#{dt_suffix[:year]}"
#   select date.strftime('%B'), :from => "#{prefix}_#{dt_suffix[:month]}"
#   select date.day.to_s, :from => "#{prefix}_#{dt_suffix[:day]}"
# end
# 
# When /^(?:|I )select "([^\"]*)" as the "([^\"]*)" time$/ do |time, prefix|
#   time = Time.parse(time)
#  
#   select time.hour.to_s, :from => "#{prefix}_#{dt_suffix[:hour]}"
#   select time.min.to_s, :from => "#{prefix}_#{dt_suffix[:minute]}"
# end
# 
# When /^(?:|I )select "([^\"]*)" as the "([^\"]*)" date and time$/ do |date, prefix|
#   date = Chronic.parse(date)
#  
#   select date.year.to_s, :from => "#{prefix}_#{dt_suffix[:year]}"
#   select date.strftime('%B'), :from => "#{prefix}_#{dt_suffix[:month]}"
#   select date.day.to_s, :from => "#{prefix}_#{dt_suffix[:day]}"
#   select date.hour.to_s, :from => "#{prefix}_#{dt_suffix[:hour]}"
#   select date.min.to_s, :from => "#{prefix}_#{dt_suffix[:minute]}"
# end
#  
# def dt_suffix
#    {
#     :year   => '1i',
#     :month  => '2i',
#     :day    => '3i',
#     :hour   => '4i',
#     :minute => '5i'
#   }
# end
# ========================


When /^(?:|I )click on the link "([^"]*)"/ do |link_name|
  click_link "#{link_name}"
end

## --------------
## THEN steps
## --------------
Then /^(?:|I )should see JSON:$/ do |expected_json|
  require 'json'
  expected = JSON.pretty_generate(JSON.parse(expected_json))
  actual   = JSON.pretty_generate(JSON.parse(response.body))
  expected.should == actual
end

Then /^(?:|I )should see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_content(text)
    else
      assert page.has_content?(text)
    end
  end
end

Then /^(?:|I )should see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_xpath('//*', :text => regexp)
    else
      assert page.has_xpath?('//*', :text => regexp)
    end
  end
end

Then /^(?:|I )should not see "([^"]*)"(?: within "([^"]*)")?$/ do |text, selector|
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_content(text)
    else
      assert page.has_no_content?(text)
    end
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/(?: within "([^"]*)")?$/ do |regexp, selector|
  regexp = Regexp.new(regexp)
  with_scope(selector) do
    if page.respond_to? :should
      page.should have_no_xpath('//*', :text => regexp)
    else
      assert page.has_no_xpath?('//*', :text => regexp)
    end
  end
end

# ===================
# CUSTOM: should see specific alt tags for location map
Then /^should see the alt text "([^\"]*)"$/ do | alt_text |
  page.should have_xpath("//img[@alt=#{alt_text}]")
end

# ===================
# CUSTOM: should see specific src tag for location map of my house, ACAC
Then /^(?:|I )should see a map of home$/ do
  html = Nokogiri::HTML(page.body)
  home_map = html.xpath '//img[@src="http://maps.google.com/maps/api/staticmap?center=40.597105,-80.063169&amp;zoom=15&amp;size=500x500&amp;maptype=roadmap&amp;markers=color:red%7Ccolor:red%7Clabel:A%7C40.597105,-80.063169&amp;sensor=false"]'
  assert !home_map.nil?
  # home_map.length.should eql(1)
end

Then /^(?:|I )should see a map of ACAC$/ do
  html = Nokogiri::HTML(page.body)
  acac_map = html.xpath '//img[@src="http://maps.google.com/maps/api/staticmap?center=40.452303,-80.00463&amp;zoom=15&amp;size=500x500&amp;maptype=roadmap&amp;markers=color:red%7Ccolor:red%7Clabel:A%7C40.452303,-80.00463&amp;sensor=false"]'
  assert !acac_map.nil?
end


# ===================
# CUSTOM: should not see for host_id on new locations page
Then /^(?:|I )should not see host option$/ do 
  possible_field_names = ['host_id', 'Host id', 'Host', 'host', 'location_host_id']
  # found = Array.new
  possible_field_names.each do |field|
    if page.respond_to? field
      page.should have_no_content(field)
    else
      assert page.has_no_content?(field)
    end
  end
end


# ===================
# CUSTOM: should not see for latitude or longitude on new locations page
Then /^(?:|I )should not see latitude longitude options$/ do 
  possible_field_names = ['latitude', 'Latitude', 'longitude', 'Longitude', 'location_latitude', 'location_longitude', 'lat', 'lon']
  # found = Array.new
  possible_field_names.each do |field|
    if page.respond_to? field
      page.should have_no_content(field)
    else
      assert page.has_no_content?(field)
    end
  end
end


# ===================
# CUSTOM: should not see for Expected Attendees on new guest page
Then /^(?:|I )should not see expected attendees option$/ do 
  possible_field_names = ['expected_attendees', 'expected_attendees', 'expected_guests', 'Expected attendees', 'guest_expected_attendees', 'guest_expected_attendees', 'guest_expected_guests']
  # found = Array.new
  possible_field_names.each do |field|
    if page.respond_to? field
      page.should have_no_content(field)
    else
      assert page.has_no_content?(field)
    end
  end
end

# ===================
# CUSTOM: should not see for Actual Attendees on new guest or new invitation page
Then /^(?:|I )should not see actual attendees option$/ do 
  possible_field_names = ['actual_attendees', 'confirmed_attendees', 'actual_guests', 'Actual attendees', 'guest_actual_attendees', 'guest_confirmed_attendees', 'guest_actual_guests']
  # found = Array.new
  possible_field_names.each do |field|
    if page.respond_to? field
      page.should have_no_content(field)
    else
      assert page.has_no_content?(field)
    end
  end
end

# ===================
# CUSTOM: should not see for Invite Code on the new guest or new invitation page
Then /^(?:|I )should not see invite code option$/ do 
  possible_field_names = ['invite_code', 'invitation_code', 'Invite code', 'Invitation code','guest_invite_code', 'guest_invitation_code']
  # found = Array.new
  possible_field_names.each do |field|
    if page.respond_to? field
      page.should have_no_content(field)
    else
      assert page.has_no_content?(field)
    end
  end
end


Then /^the "([^"]*)" field(?: within "([^"]*)")? should contain "([^"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within "([^"]*)")? should not contain "([^"]*)"$/ do |field, selector, value|
  with_scope(selector) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within "([^"]*)")? should not be checked$/ do |label, selector|
  with_scope(selector) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end
 
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')} 
  
  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end
